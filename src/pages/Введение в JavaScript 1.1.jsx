import { Container } from 'react-bootstrap'
import { FaInfoCircle } from 'react-icons/fa'
import ArrowNavigator from '../components/ArrowNavigator'

export default function Introduction() {

	return (
		<Container className='text-light mt-5'>
		
				<ArrowNavigator />
			<h1
				style={{
					fontSize: '2rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Введение в JavaScript
			</h1>
			<p
				style={{
					marginTop: '20px',
				}}
			>
				Давайте посмотрим, что такого особенного в JavaScript, чего можно
				достичь с его помощью и какие другие технологии хорошо с ним работают.
			</p>

			<h1
				style={{
					marginTop: '40px',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Что такое JavaScript?
			</h1>
			<p
				style={{
					marginTop: '5px',
				}}
			>
				Изначально JavaScript был создан, чтобы «сделать веб-страницы живыми».
			</p>

			<p
				style={{
					marginTop: '5px',
				}}
			>
				Программы на этом языке называются скриптами. Они могут встраиваться в
				HTML и выполняться автоматически при загрузке веб-страницы.
			</p>

			<p
				style={{
					marginTop: '5px',
				}}
			>
				Скрипты распространяются и выполняются, как простой текст. Им не нужна
				специальная подготовка или компиляция для запуска.
			</p>

			<p
				style={{
					marginTop: '5px',
				}}
			>
				Это отличает JavaScript от другого языка –{' '}
				<a href='https://ru.wikipedia.org/wiki/Java'>Java.</a>
			</p>

			<div
				style={{
					border: '5px solid rgb(49, 49, 49)',
					borderRadius: '10px',
					margin: '40px 0',
					padding: '20px',
				}}
			>
				<h1
					style={{
						fontSize: '1.3rem',
						fontFamily: 'monospace',
						fontWeight: 'bold',
					}}
				>
					{' '}
					<FaInfoCircle
						style={{
							position: 'relative',
							bottom: '2px',
							margin: '5px',
							color: '#3463ff',
						}}
					/>
					Почему JavaScript?
				</h1>
				<p>
					Когда JavaScript создавался, у него было другое имя – «LiveScript».
					Однако, язык Java был очень популярен в то время, и было решено, что
					позиционирование JavaScript как «младшего брата» Java будет полезно.
				</p>
				<p style={{ margin: '0' }}>
					Со временем JavaScript стал полностью независимым языком со своей
					собственной спецификацией, называющейся{' '}
					<a
						style={{ margin: '0' }}
						href='https://ru.wikipedia.org/wiki/ECMAScript'
					>
						ECMAScript,
					</a>{' '}
					и сейчас не имеет никакого отношения к Java.
				</p>
			</div>

			<p>
				Сегодня JavaScript может выполняться не только в браузере, но и на
				сервере или на любом другом устройстве, которое имеет специальную
				программу, называющуюся «движком» JavaScript.
			</p>
			<p>
				У браузера есть собственный движок, который иногда называют «виртуальная
				машина JavaScript».
			</p>
			<p>Разные движки имеют разные «кодовые имена». Например:</p>
			<ul>
				<li>
					<a
						style={{ margin: '0' }}
						href='https://ru.wikipedia.org/wiki/V8_(движок_JavaScript)'
					>
						V8{' '}
					</a>{' '}
					– в Chrome, Opera и Edge.
				</li>
				<li>
					{' '}
					<a
						style={{ margin: '0' }}
						href='https://ru.wikipedia.org/wiki/SpiderMonkey'
					>
						SpiderMonkey{' '}
					</a>{' '}
					– в Firefox.
				</li>
				<li>
					…Ещё есть «Chakra» для IE, «JavaScriptCore», «Nitro» и «SquirrelFish»
					для Safari и т.д.
				</li>
			</ul>
			<p>
				Эти названия полезно знать, так как они часто используются в статьях для
				разработчиков. Мы тоже будем их использовать. Например, если
				«функциональность X поддерживается V8», тогда «Х», скорее всего,
				работает в Chrome, Opera и Edge.
			</p>

			<div
				style={{
					border: '5px solid rgb(49, 49, 49)',
					borderRadius: '10px',
					margin: '40px 0',
					padding: '20px',
				}}
			>
				<h1
					style={{
						fontSize: '1.3rem',
						fontFamily: 'monospace',
						fontWeight: 'bold',
					}}
				>
					{' '}
					<FaInfoCircle
						style={{
							position: 'relative',
							bottom: '2px',
							margin: '5px',
							color: '#3463ff',
						}}
					/>
					Как работают движки?
				</h1>
				<p>Движки сложны. Но основы понять легко.</p>
				<ol>
					<li>
						Движок (встроенный, если это браузер) читает («парсит») текст
						скрипта.
					</li>
					<li>Затем он преобразует («компилирует») скрипт в машинный язык.</li>
					<li>
						После этого машинный код запускается и работает достаточно быстро.
					</li>
				</ol>
				<p>
					Движок применяет оптимизации на каждом этапе. Он даже просматривает
					скомпилированный скрипт во время его работы, анализируя проходящие
					через него данные, и применяет оптимизации к машинному коду, полагаясь
					на полученные знания. В результате скрипты работают очень быстро.{' '}
				</p>
			</div>

			<h1
				style={{
					margin: '40px 0',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Что может JavaScript в браузере?
			</h1>
			<p>
				Современный JavaScript – это «безопасный» язык программирования. Он не
				предоставляет низкоуровневый доступ к памяти или процессору, потому что
				изначально был создан для браузеров, не требующих этого.
			</p>
			<p>
				Возможности JavaScript сильно зависят от окружения, в котором он
				работает. Например,{' '}
				<a style={{ margin: '0' }} href='https://ru.wikipedia.org/wiki/Node.js'>
					Node.js
				</a>{' '}
				поддерживает функции чтения/записи произвольных файлов, выполнения
				сетевых запросов и т.д.
			</p>
			<p>
				В браузере для JavaScript доступно всё, что связано с манипулированием
				веб-страницами, взаимодействием с пользователем и веб-сервером.
			</p>
			<p>Например, в браузере JavaScript может:</p>
			<ul>
				<li>
					Добавлять новый HTML-код на страницу, изменять существующее
					содержимое, модифицировать стили.
				</li>
				<li>
					Реагировать на действия пользователя, щелчки мыши, перемещения
					указателя, нажатия клавиш.
				</li>
				<li>
					Отправлять сетевые запросы на удалённые сервера, скачивать и загружать
					файлы (технологии{' '}
					<a style={{ margin: '0' }} href='https://ru.wikipedia.org/wiki/AJAX'>
						AJAX
					</a>{' '}
					и{' '}
					<a
						style={{ margin: '0' }}
						href='https://ru.wikipedia.org/wiki/Comet_(программирование)'
					>
						COMET
					</a>{' '}
					).
				</li>
				<li>
					Получать и устанавливать куки, задавать вопросы посетителю, показывать
					сообщения.
				</li>
				<li>Запоминать данные на стороне клиента («local storage»).</li>
			</ul>

			<h1
				style={{
					margin: '40px 0',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Чего НЕ может JavaScript в браузере?
			</h1>
			<p>
				Возможности JavaScript в браузере ограничены ради безопасности
				пользователя. Цель заключается в предотвращении доступа недобросовестной
				веб-страницы к личной информации или нанесения ущерба данным
				пользователя.
			</p>
			<p>Примеры таких ограничений включают в себя:</p>
			<ul>
				<li>
					<p>
						JavaScript на веб-странице не может читать/записывать произвольные
						файлы на жёстком диске, копировать их или запускать программы. Он не
						имеет прямого доступа к системным функциям ОС.
					</p>
					<p>
						Современные браузеры позволяют ему работать с файлами, но с
						ограниченным доступом, и предоставляют его, только если пользователь
						выполняет определённые действия, такие как «перетаскивание» файла в
						окно браузера или его выбор с помощью тега input.
					</p>
					<p>
						Существуют способы взаимодействия с камерой/микрофоном и другими
						устройствами, но они требуют явного разрешения пользователя. Таким
						образом, страница с поддержкой JavaScript не может незаметно
						включить веб-камеру, наблюдать за происходящим и отправлять
						информацию в{' '}
						<a
							style={{ margin: '0' }}
							href='https://ru.wikipedia.org/wiki/Федеральная_служба_безопасности_Российской_Федерации'
						>
							ФСБ
						</a>{' '}
						.
					</p>
				</li>
				<li>
					<p>
						Различные окна/вкладки не знают друг о друге. Иногда одно окно,
						используя JavaScript, открывает другое окно. Но даже в этом случае
						JavaScript с одной страницы не имеет доступа к другой, если они
						пришли с разных сайтов (с другого домена, протокола или порта).
					</p>
					<p>
						Это называется «Политика одинакового источника» (Same Origin
						Policy). Чтобы обойти это ограничение, обе страницы должны
						согласиться с этим и содержать JavaScript-код, который специальным
						образом обменивается данными.
					</p>
					<p>
						Это ограничение необходимо, опять же, для безопасности пользователя.
						Страница https://anysite.com, которую открыл пользователь, не должна
						иметь доступ к другой вкладке браузера с URL https://gmail.com и
						воровать информацию оттуда.
					</p>
				</li>
				<li>
					JavaScript может легко взаимодействовать с сервером, с которого пришла
					текущая страница. Но его способность получать данные с других
					сайтов/доменов ограничена. Хотя это возможно в принципе, для чего
					требуется явное согласие (выраженное в заголовках HTTP) с удалённой
					стороной. Опять же, это ограничение безопасности.
				</li>
			</ul>
			<p>
				Подобные ограничения не действуют, если JavaScript используется вне
				браузера, например — на сервере. Современные браузеры предоставляют
				плагины/расширения, с помощью которых можно запрашивать дополнительные
				разрешения.
			</p>
			<h1
				style={{
					margin: '40px 0',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Что делает JavaScript особенным?
			</h1>
			<p>Как минимум, три сильные стороны JavaScript:</p>

			<div
				style={{
					border: '5px solid rgb(49, 49, 49)',
					borderRadius: '10px',
					margin: '40px 0',
					padding: '20px',
				}}
			>
				<ul
					style={{
						margin: '0',
					}}
				>
					<li>Полная интеграция с HTML/CSS.</li>
					<li>Простые вещи делаются просто.</li>
					<li>
						Поддерживается всеми основными браузерами и включён по умолчанию.
					</li>
				</ul>
			</div>

			<p>
				JavaScript – это единственная браузерная технология, сочетающая в себе
				все эти три вещи.
			</p>
			<p>
				Вот что делает JavaScript особенным. Вот почему это самый
				распространённый инструмент для создания интерфейсов в браузере.
			</p>
			<p>
				Хотя, конечно, JavaScript позволяет делать приложения не только в
				браузерах, но и на сервере, на мобильных устройствах и т.п.
			</p>

			<h1
				style={{
					margin: '40px 0',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Языки «над» JavaScript
			</h1>
			<p>
				Синтаксис JavaScript подходит не под все нужды. Разные люди хотят иметь
				разные возможности.
			</p>
			<p>
				Это естественно, потому что проекты разные и требования к ним тоже
				разные.
			</p>
			<p>
				Так, в последнее время появилось много новых языков, которые
				транспилируются (конвертируются) в JavaScript, прежде чем запустятся в
				браузере.
			</p>
			<p>
				Современные инструменты делают транспиляцию очень быстрой и прозрачной,
				фактически позволяя разработчикам писать код на другом языке,
				автоматически преобразуя его в JavaScript «под капотом».
			</p>
			<p>Примеры таких языков:</p>

			<ul>
				<li>
					{' '}
					<a style={{ margin: '0' }} href='https://coffeescript.org/'>
						CoffeeScript
					</a>{' '}
					добавляет «синтаксический сахар» для JavaScript. Он вводит более
					короткий синтаксис, который позволяет писать чистый и лаконичный код.
					Обычно такое нравится Ruby-программистам.
				</li>
				<li>
					{' '}
					<a style={{ margin: '0' }} href='https://www.typescriptlang.org/'>
						{' '}
					</a>
					TypeScript концентрируется на добавлении «строгой типизации» для
					упрощения разработки и поддержки больших и сложных систем. Разработан
					Microsoft.
				</li>
				<li>
					<a style={{ margin: '0' }} href='https://flow.org/'>
						Flow{' '}
					</a>{' '}
					тоже добавляет типизацию, но иначе. Разработан Facebook.
				</li>
				<li>
					<a style={{ margin: '0' }} href='https://www.dartlang.org/'>
						Dart
					</a>{' '}
					стоит особняком, потому что имеет собственный движок, работающий вне
					браузера (например, в мобильных приложениях). Первоначально был
					предложен Google, как замена JavaScript, но на данный момент
					необходима его транспиляция для запуска так же, как для
					вышеперечисленных языков.
				</li>
				<li>
					<a style={{ margin: '0' }} href='https://brython.info/'>
						Brython
					</a>{' '}
					транспилирует Python в JavaScript, что позволяет писать приложения на
					чистом Python без JavaScript.
				</li>
			</ul>

			<p>
				Есть и другие. Но даже если мы используем один из этих языков, мы должны
				знать JavaScript, чтобы действительно понимать, что мы делаем.
			</p>

			<h1
				style={{
					margin: '40px 0',
					fontSize: '1.9rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Итого
			</h1>

			<ul>
				<li>
					JavaScript изначально создавался только для браузера, но сейчас
					используется на многих других платформах.
				</li>
				<li>
					Сегодня JavaScript занимает уникальную позицию в качестве самого
					распространённого языка для браузера, обладающего полной интеграцией с
					HTML/CSS.
				</li>
				<li>
					Многие языки могут быть «транспилированы» в JavaScript для
					предоставления дополнительных функций. Рекомендуется хотя бы кратко
					рассмотреть их после освоения JavaScript.
				</li>
			</ul>
		</Container>
	)
}
