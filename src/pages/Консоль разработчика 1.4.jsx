import { Container } from 'react-bootstrap'
import ArrowNavigator from '../components/ArrowNavigator'
import console from '../assets/console.png'
import safari from '../assets/safari.png'
import { FaInfoCircle } from 'react-icons/fa'

export default function Console() {
	return (
		<Container className='text-light mt-5'>
			<ArrowNavigator />

			<h1
				style={{
					fontSize: '2rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
				}}
			>
				Консоль разработчика
			</h1>
			<p>
				Код уязвим для ошибок. И вы, скорее всего, будете делать ошибки в коде…
				Впрочем, давайте будем откровенны: вы точно будете совершать ошибки в
				коде. В конце концов, вы человек, а не робот.
			</p>
			<p>
				Но по умолчанию в браузере ошибки не видны. То есть, если что-то пойдёт
				не так, мы не увидим, что именно сломалось, и не сможем это починить.
			</p>
			<p>
				Для решения задач такого рода в браузер встроены так называемые
				«Инструменты разработки» (Developer tools или сокращённо — devtools).
			</p>
			<p>
				Chrome и Firefox снискали любовь подавляющего большинства программистов
				во многом благодаря своим отменным инструментам разработчика. Остальные
				браузеры, хотя и оснащены подобными инструментами, но всё же зачастую
				находятся в роли догоняющих и по качеству, и по количеству свойств и
				особенностей. В общем, почти у всех программистов есть свой «любимый»
				браузер. Другие используются только для отлова и исправления специфичных
				«браузерозависимых» ошибок.
			</p>
			<p>
				Для начала знакомства с этими мощными инструментами давайте выясним, как
				их открывать, смотреть ошибки и запускать команды JavaScript.
			</p>

			<h1
				style={{
					fontSize: '1.7rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
					marginTop: '40px',
				}}
			>
				Google Chrome
			</h1>

			<p>Откройте страницу bug.html.</p>
			<p>
				В её JavaScript-коде закралась ошибка. Она не видна обычному посетителю,
				поэтому давайте найдём её при помощи инструментов разработки.
			</p>
			<p>
				Нажмите <span className='text-danger'>F12</span> или, если вы
				используете Mac, <span className='text-danger'>Cmd+Opt+J</span> .
			</p>
			<p>
				По умолчанию в инструментах разработчика откроется вкладка Console
				(консоль).
			</p>
			<p>Она выглядит приблизительно следующим образом:</p>

			<img src={console} alt='console' />

			<p style={{ marginTop: '30px' }}>
				Точный внешний вид инструментов разработки зависит от используемой
				версии Chrome. Время от времени некоторые детали изменяются, но в целом
				внешний вид остаётся примерно похожим на предыдущие версии.
			</p>
			<ul>
				<li>
					В консоли мы можем увидеть сообщение об ошибке, отрисованное красным
					цветом. В нашем случае скрипт содержит неизвестную команду «lalala».
				</li>
				<li>
					Справа присутствует ссылка на исходный код bug.html:12 с номером
					строки кода, в которой эта ошибка и произошла.
				</li>
			</ul>

			<p>
				Под сообщением об ошибке находится синий символ . Он обозначает
				командную строку, в ней мы можем редактировать и запускать
				JavaScript-команды. Для их запуска нажмите{' '}
				<span className='text-danger'>Enter</span>.
			</p>

			<div
				style={{
					border: '5px solid rgb(49, 49, 49)',
					borderRadius: '10px',
					margin: '40px 0',
					padding: '20px',
				}}
			>
				<h1
					style={{
						fontSize: '1.3rem',
						fontFamily: 'monospace',
						fontWeight: 'bold',
					}}
				>
					{' '}
					<FaInfoCircle
						style={{
							position: 'relative',
							bottom: '2px',
							margin: '5px',
							color: '#3463ff',
						}}
					/>
					Многострочный ввод
				</h1>
				<p>
					Обычно при нажатии <span className='text-danger'>Enter</span>{' '}
					введённая строка кода сразу выполняется.
				</p>
				<p style={{ margin: '0' }}>
					Чтобы перенести строку, нажмите{' '}
					<span className='text-danger'>Shift+Enter</span> . Так можно вводить
					более длинный JS-код.
				</p>
			</div>
			<p>Теперь мы явно видим ошибки, для начала этого вполне достаточно. Мы ещё вернёмся к инструментам разработчика позже и более подробно рассмотрим отладку кода в главе Отладка в браузере.</p>

			<h1
				style={{
					fontSize: '1.7rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
					marginTop: '40px',
				}}
			>
				Firefox, Edge и другие
			</h1>
			<p>Инструменты разработчика в большинстве браузеров открываются при нажатии на <span className='text-danger'>F12</span>.</p>
			<p>Их внешний вид и принципы работы мало чем отличаются. Разобравшись с инструментами в одном браузере, вы без труда сможете работать с ними и в другом.</p>
			<h1
				style={{
					fontSize: '1.7rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
					marginTop: '40px',
				}}
			>
				Safari
			</h1>
			<p>Safari (браузер для Mac, не поддерживается в системах Windows/Linux) всё же имеет небольшое отличие. Для начала работы нам нужно включить «Меню разработки» («Developer menu»).</p>
			<p>Откройте Настройки (Preferences) и перейдите к панели «Продвинутые» (Advanced). В самом низу вы найдёте чекбокс:</p>

			<img src={safari} alt="safarii" />

			<p style={{ marginTop: '30px' }}>Теперь консоль можно активировать нажатием клавиш <span className='text-danger'>Cmd+Opt+C</span> . Также обратите внимание на новый элемент меню «Разработка» («Develop»). В нем содержится большое количество команд и настроек.</p>
			<h1
				style={{
					fontSize: '1.7rem',
					fontFamily: 'monospace',
					fontWeight: 'bold',
					marginTop: '40px',
				}}
			>
				Итого
			</h1>
			<ul>
				<li>Инструменты разработчика позволяют нам смотреть ошибки, выполнять команды, проверять значение переменных и ещё много всего полезного.</li>
				<li>В большинстве браузеров, работающих под Windows, инструменты разработчика можно открыть, нажав <span className='text-danger'>F12</span>. В Chrome для Mac используйте комбинацию <span className='text-danger'>Cmd+Opt+J</span> , Safari: <span className='text-danger'>Cmd+Opt+C</span> (необходимо предварительное включение «Меню разработчика»).</li>
			</ul>
			<p>Теперь наше окружение полностью настроено. В следующем разделе мы перейдём непосредственно к JavaScript.</p>
		</Container>
	)
}
