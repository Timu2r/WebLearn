import { Badge, Container } from 'react-bootstrap';
import { FaInfoCircle } from 'react-icons/fa';
import ArrowNavigator from '../../components/ArrowNavigator.jsx';
import CodeJs from '../../components/CodeJs.jsx';
import CodeNote from '../../components/CodeNote.jsx';
import TaskViewer from '../../components/TaskViewer/TaskViewer.jsx';
import { tasks } from '../../data/tasks.js'; // Убедитесь, что у вас есть соответствующие задачи для этой темы

export default function CommentsDoc() {
  return (
    <Container className='text-light mt-5 mb-5'>
      <ArrowNavigator />
      <h1>Комментарии в JavaScript</h1>

      <p>
        Как мы знаем из главы{' '}
        <Badge bg='secondary'>Структура кода</Badge>, комментарии могут быть
        однострочными, начинающимися с <CodeNote js='//' />
        , и многострочными: <CodeNote js='/* ... */' />.
      </p>
      <p>
        Обычно мы их используем, чтобы описать, как и почему работает код.
      </p>
      <p>
        На первый взгляд, в комментариях нет ничего сложного, но новички в
        программировании часто применяют их неправильно.
      </p>

      <h2>Плохие комментарии</h2>
      <p>
        Новички склонны использовать комментарии, чтобы объяснять, «что делает
        код». Например, так:
      </p>
      <CodeNote
        js={`// Этот код делает это (...) и вот это (...)
// ...и кто знает, что ещё...
очень;
сложный;
код;`}
      />
      <p>
        Но в хорошем коде количество «объясняющих» комментариев должно быть
        минимальным. Серьёзно, код должен быть таким, чтобы его можно было
        понять без комментариев.
      </p>
      <p>
        Про это есть хорошее правило: «Если код настолько запутанный, что
        требует комментариев, то, может быть, его стоит переделать?»
      </p>

      <h3>Рецепт: выносите код в функции</h3>
      <p>
        Иногда выгодно заменить часть кода функцией, например, в таком случае:
      </p>
      <CodeNote
        js={`function showPrimes(n) {
  nextPrime:
  for (let i = 2; i < n; i++) {
    // проверяем, является ли i простым числом
    for (let j = 2; j < i; j++) {
      if (i % j == 0) continue nextPrime;
    }

    alert(i);
  }
}`}
      />
      <p>Лучший вариант – использовать отдельную функцию <Badge bg='secondary'>isPrime</Badge>:</p>
      <CodeNote
        js={`function showPrimes(n) {
  for (let i = 2; i < n; i++) {
    if (!isPrime(i)) continue;
    alert(i);
  }
}

function isPrime(n) {
  for (let i = 2; i < n; i++) {
    if (n % i == 0) return false;
  }
  return true;
}`}
      />
      <p>
        Теперь код легче понять. Функция сама становится комментарием. Такой
        код называется <Badge bg='secondary'>самодокументированным</Badge>.
      </p>

      <h3>Рецепт: создавайте функции</h3>
      <p>И если мы имеем такой длинный кусок кода:</p>
      <CodeNote
        js={`// здесь мы добавляем виски
for(let i = 0; i < 10; i++) {
  let drop = getWhiskey();
  smell(drop);
  add(drop, glass);
}

// здесь мы добавляем сок
for(let t = 0; t < 3; t++) {
  let tomato = getTomato();
  examine(tomato);
  let juice = press(tomato);
  add(juice, glass);
}
// ...`}
      />
      <p>То будет лучше отрефакторить его с использованием функций:</p>
      <CodeNote
        js={`addWhiskey(glass);
addJuice(glass);

function addWhiskey(container) {
  for(let i = 0; i < 10; i++) {
    let drop = getWhiskey();
    //...
  }
}

function addJuice(container) {
  for(let t = 0; t < 3; t++) {
    let tomato = getTomato();
    //...
  }
}`}
      />
      <p>
        Здесь комментарии тоже не нужны: функции сами говорят, что делают (если
        вы понимаете английский язык). И ещё, структура кода лучше, когда он
        разделён на части. Понятно, что делает каждая функция, что она
        принимает и что возвращает.
      </p>
      <p>
        В реальности мы не можем полностью избежать «объясняющих» комментариев.
        Существуют сложные алгоритмы. И есть хитрые уловки для оптимизации. Но
        в целом мы должны стараться писать простой и самодокументированный код.
      </p>

      <h2>Хорошие комментарии</h2>
      <p>
        Итак, обычно «объясняющие» комментарии – это плохо. Но тогда какой
        комментарий считается хорошим?
      </p>

      <h3>Описывайте архитектуру</h3>
      <p>
        Сделайте высокоуровневый обзор компонентов, того, как они
        взаимодействуют, каков поток управления в различных ситуациях… Если
        вкратце – обзор кода с высоты птичьего полёта. Существует специальный
        язык <Badge bg='secondary'>UML</Badge> для создания диаграмм,
        разъясняющих архитектуру кода. Его определённо стоит изучить.
      </p>

      <h3>Документируйте параметры и использование функций</h3>
      <p>
        Есть специальный синтаксис <Badge bg='secondary'>JSDoc</Badge> для
        документирования функций: использование, параметры, возвращаемое
        значение.
      </p>
      <p>Например:</p>
      <CodeNote
        js={`/**
 * Возвращает x, возведённое в n-ную степень.
 *
 * @param {number} x Возводимое в степень число.
 * @param {number} n Степень, должна быть натуральным числом.
 * @return {number} x, возведённое в n-ную степень.
 */
function pow(x, n) {
  // ...
}`}
      />
      <p>
        Подобные комментарии позволяют нам понимать назначение функции и
        правильно её использовать без необходимости заглядывать в код.
      </p>
      <p>
        Кстати, многие редакторы, такие как <Badge bg='secondary'>WebStorm</Badge>,
        прекрасно их распознают для того, чтобы выполнить автодополнение ввода
        и различные автоматические проверки кода.
      </p>
      <p>
        Также существуют инструменты, например, <Badge bg='secondary'>JSDoc 3</Badge>,
        которые умеют генерировать HTML-документацию из комментариев. Получить
        больше информации о JSDoc вы можете здесь: {' '}
        <a
          href='https://jsdoc.app'
          target='_blank'
          rel='noopener noreferrer'
          className='text-info'
        >
          https://jsdoc.app
        </a>
        .
      </p>

      <h3>Почему задача решена именно таким способом?</h3>
      <p>
        Важно то, что написано. Но то, что <Badge bg='secondary'>не</Badge>{' '}
        написано, может быть даже более важным, чтобы понимать происходящее.
        Почему задача решена именно этим способом? Код не даёт ответа.
      </p>
      <p>
        Если есть несколько способов решить задачу, то почему вы выбрали именно
        этот? Особенно если ваш способ – не самый очевидный.
      </p>
      <p>Без подобных комментариев возможна следующая ситуация:</p>
      <p>
        Вы (или ваш коллега) открываете написанный некоторое время назад код и
        видите, что в нём есть, что улучшить.
      </p>
      <p>
        Вы думаете: «Каким глупым я раньше был и насколько умнее стал сейчас»,
        и переписываете его на «более правильный и оптимальный» вариант.
      </p>
      <p>
        …Желание переписать код – это хорошо. Но в процессе вы понимаете, что
        «оптимальное» решение на самом деле не такое уж и оптимальное. Вы даже
        смутно припоминаете, почему, так как в прошлый раз вы уже его пробовали.
        Вы возвращаетесь к правильному варианту, потратив время зря.
      </p>
      <p>
        Комментарии, объясняющие решение, очень важны. Они помогают продолжать
        разработку в правильном направлении.
      </p>

      <h3>В коде есть какие-то тонкости? Где они используются?</h3>
      <p>
        Если в коде есть какие-то тонкости и неочевидные вещи, его определённо
        нужно комментировать.
      </p>

        <h1>
          Итого
        </h1>
        <p>
          Комментарии – важный признак хорошего разработчика, причём как их
          наличие, так и отсутствие.
        </p>
        <p>
          Хорошие комментарии позволяют нам поддерживать код, дают возможность
          вернуться к нему после перерыва и эффективнее его использовать.
        </p>
        <p>Комментируйте:</p>
        <ul>
          <li>
            Общую архитектуру, вид «с высоты птичьего полёта».
          </li>
          <li>Использование функций.</li>
          <li>Неочевидные решения, важные детали.</li>
        </ul>
        <p>Избегайте комментариев:</p>
        <ul>
          <li>
            Которые объясняют, как работает код, и что он делает.
          </li>
          <li>
            Используйте их только в тех случаях, когда невозможно сделать
            настолько простой и самодокументированный код, что он не потребует
            комментариев.
          </li>
        </ul>
        <p>
          Средства для генерации документации по коду, такие как JSDoc3, также
          используют комментарии: они их читают и генерируют HTML-документацию
          (или документацию в другом формате).
        </p>
    </Container>
  );
}